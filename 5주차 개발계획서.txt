5주차 개발 계획서
2025/04/07
목표 : 저번 주 발견한 오류 수정 및 기능추가, 주석 추가
-------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

//클래스 정의함
class Student {
public:
    string name;//변수선언
    int id, tardy, absent;
    double mid, final;
    // 생성자 정의
    Student(string n, int i, int t, int a, double m, double f)
        : name(n), id(i), tardy(t), absent(a), mid(m), final(f) {}//생성자 본체
    // 출석 점수
    double attendance() const {
        int total_absent = absent + (tardy / 3);//지각 3회마다 결석 1회 추가
        double score = 10 - (total_absent + (tardy % 3) * 0.2);//남은 지각은 1회당 0.2점 감점-----------------------------
        return max(0.0, score);
    }
    //최종 점수 계산:중간고사40%,기말고사50%,출석 점수10점
    double Score() const {
        return mid * 0.4 + final * 0.5 + attendance();
    }
    //상대평가로 학점 반환
    string Grade(const vector<Student>& students) const {
        double score = Score();//학생의 총점을 계산
        vector<double> scores;//학생들의 점수를 저장할 벡터 선언
        //학생의 총점을 벡터 저장함
        for (const auto& student : students) {
            scores.push_back(student.Score());
        }
        //내림차순 정렬
        sort(scores.begin(), scores.end(), greater<double>());
        //현재 학생의 순위 계산
        int rank = find(scores.begin(), scores.end(), score) - scores.begin();
        double percent = (double)(rank + 1) / scores.size();//전체에서의 백분율 순위
        //중간고사나 기말고사 중 0점이거나 결석(지각 포함)4회 이상이면 F
        if (mid == 0 || final == 0 || absent + (tardy / 3) >= 4)
            return "F";
        //등급 평가 기준
        if (percent <= 0.10)
            return "A+";
        else if (percent <= 0.30)
            return "A";
        else if (percent <= 0.40)
            return "B+";
        else if (percent <= 0.60)
            return "B";
        else if (percent <= 0.70)
            return "C+";
        else
            return "C";
    }
};
//학생 관리자 클래스
class StudentManagement {
private:
    vector<Student> students;
public:
    //학생 정보를 불러오기
    void loadFromFile() {
        ifstream file("students.txt");
        if (!file) {//파일 열기에 실패했는지 확인
            cout << "저장된 파일이 없습니다.\n";
            return;
        }
        students.clear();//기존의 학생 목록 초기화하기
        string name;
        int id, tardy, absent;
        double mid, final;
        //파일에서 벡터로 학생 정보를 불러오기
        while (file >> name >> id >> tardy >> absent >> mid >> final) {
            students.push_back(Student(name, id, tardy, absent, mid, final));
        }
        file.close();
        cout << "파일을 로드 완료했습니다. ";
    }
    //파일에 저장하는 함수
    void saveToFile() {
        ofstream file("students.txt");//txt출력한다
        if (!file) {
            cout << "파일을 저장하는 데 실패했습니다.\n";
            return;
        }
        //벡터에서 학생 정보를 파일로 저장
        for (const auto& student : students) {
            file << student.name << " " << student.id << " " << student.tardy << " "
                << student.absent << " " << student.mid << " " << student.final << "\n";
        }
        file.close();
        cout << "파일을 저장 완료했습니다.\n";
    }
    //1번 기능 학생 추가하기
    void add() {
        string name;
        int id, tardy, absent;
        double mid, final;

        cout << "이름을 입력하세요: ";
        cin >> name;
        //학번 입력 반복
        while (true) {
            cout << "학번을 입력하세요(10자리): ";
            cin >> id;
            //숫자가 아닌 값이 들어오면 다시 입력
            if (cin.fail()) {
                cin.clear();//입력 에러 상태 초기화
                cin.ignore(1000, '\n');//잘못 입력된 내용 버리기
                cout << "숫자만 입력하세요.\n";
                continue;
            }
            //학번 자릿수(10자리)를 제대로 입력했는지 확인
            if (to_string(id).length() != 10) {
                cout << "학번은 10자리여야 합니다.\n";
                break;
            }
            //학번 중복 확인
            bool Dp = false;
            //학번이 중복이면 메세지 출력
            for (const auto& student : students) {
                if (student.id == id) {
                    cout << "이미 존재하는 학번입니다.\n";
                    Dp = true;
                    break;
                }
            }
            if (Dp) continue;
            break;//문제 없으면 반복 종료
        }
        cout << "지각 횟수를 입력하세요: ";
        cin >> tardy;
        cout << "결석 횟수를 입력하세요: ";
        cin >> absent;
        cout << "중간고사 성적을 입력하세요: ";
        cin >> mid;
        cout << "기말고사 성적을 입력하세요: ";
        cin >> final;
        //성적이 제대로 입력했는지 확인
        if (mid < 0 || mid > 100 || final < 0 || final > 100) {
            cout << "성적은 0~100 사이여야 합니다.\n";
            return;
        }
        //학생 정보 저장
        students.push_back(Student(name, id, tardy, absent, mid, final));
        cout << "학생 추가 완료함\n";
        saveToFile();
    }
    //2번 기능 학생 삭제하기
    void deleteStudent() {
        int id;
        cout << "삭제할 학생의 학번 입력하세요: ";
        cin >> id;

        if (cin.fail()) {
            cin.clear(); // cin 에러 상태 초기화
            cin.ignore(1000, '\n'); // 버퍼에 남은 입력 제거
            cout << "잘못된 학번입니다.\n";
            return;
        }
        auto i = students.begin();//리스트 확인하는 작업
        for (; i != students.end(); ++i) { // 학생 리스트 끝까지 반복
            if (i->id == id) {//입력한 학번을 삭제
                students.erase(i);
                cout << "학생을 삭제 완료했습니다.\n";
                saveToFile();
                return;
            }
        }
        cout << "해당 학번의 학생이 없습니다.\n";
    }
    //2-2.학생 목록 초기화하기
    void clearAllStudents() {
        students.clear();
        cout << "모든 학생 정보가 초기화되었습니다.\n";
        saveToFile();
    }
    //3번 기능 학생 정보 출력하기
    void display() const {
        if (students.empty()) {
            cout << "저장된 학생 정보가 없습니다.\n";
            return;
        }
        //성적 기준으로 정렬된 복사본 생성
        vector<Student> sorted_students = students;
        sort(sorted_students.begin(), sorted_students.end(), [&](const Student& a, const Student& b) {
            return a.Score() > b.Score(); //Score 기준 내림차순 정렬
            });
        //학생 목록 출력
        cout << "\n------학생 목록 (성적 순 정렬)------\n";
        for (const auto& student : sorted_students) {
            cout << "이름: " << student.name << " 학번: " << student.id
                << " 중간고사 성적: " << student.mid
                << " 기말고사 성적: " << student.final
                << " 출석 점수: " << student.attendance()
                << " 최종 성적: " << student.Score()
                << " 학점: " << student.Grade(students) << "\n";
        }
    }
};
//메인 함수
int main() {
    StudentManagement sm;
    sm.loadFromFile();
    int choice;
    while (true) {
        cout << "\n===== 안녕하세요! 학생 관리 시스템입니다. 원하시는 기능을 이용하세요. =====\n";
        cout << "1. 학생 추가하기\n";
        cout << "2. 학생 삭제하기\n";
        cout << "3. 학생 목록 보기\n";
        cout << "4. 종료\n";
        cout << "선택: ";
        cin >> choice;

        switch (choice) {
        case 1:
            sm.add();
            break;
        case 2:
            while (true) {
                cout << "\n------삭제 및 초기화 기능------\n";
                cout << "1. 학생 삭제하기\n";
                cout << "2. 학생 목록 초기화하기\n";
                cout << "3. 돌아가기\n";
                cout << "선택: ";
                cin >> choice;

                if (choice == 1) {
                    sm.deleteStudent();
                }
                else if (choice == 2) {
                    sm.clearAllStudents();
                }
                else if (choice == 3) {
                    break;
                }
                else {
                    cout << "잘못된 입력입니다.다시 선택하세요.\n";
                }
            }
            break;
        case 3:
            sm.display();
            break;
        case 4:
            sm.saveToFile();
            cout << "프로그램 종료.\n";
            return 0;
        default:
            cout << "잘못된 입력입니다.다시 선택하세요.\n";
        }
    }
}
-------------------------------------------------------------------------------------------------------
5주차에는 추가, 저장, 목록 보기, 삭제, 종료 기능의 UI를 구현하고,2, 3, 4주차의 오류를 수정했습니다.
학생 삭제 시 초기화 기능을 추가하고 편의성을 개선했으며 출석 점수 및 성적 등급 나누는 기능을 추가했습니다.
학생 추가 기능에서 편의성을 높였고, 학생 목록을 성적이 높은 순으로 정렬하여 출력하도록 했습니다.
또한,주석을 추가하고 기능 테스트를 통해 통합 테스트를 통과했습니다.
다음 주에는 앱으로 구현할 예정입니다.
