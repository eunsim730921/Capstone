2주차 개발 계획서
2025/03/21
목표 : 기능에 따른 요구 사항 정리 및 시스템 개발
-------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

class Student {
public:
    string name;
    int id;
    double mid;
    double final;
    Student(string n, int i, double m, double f) : name(n), id(i), mid(m), final(f) {}
};
class StudentManagement {
private:
    vector<Student> students;
public:
    void loadFromFile() {
        ifstream file("students.txt");
        if (!file) {
            cout << "저장된 파일이 없습니다.\n";
            return;
        }
        students.clear();
        string name;
        int id;
        double mid, final;
        while (file >> name >> id >> mid >> final) {
            students.push_back(Student(name, id, mid, final));
        }
        file.close();
        cout << "파일을 로드 완료했습니다. " << students.size() << "명의 학생 정보를 불러왔습니다.\n";
    }
    void saveToFile() {
        ofstream file("students.txt");
        if (!file) {
            cout << "파일을 저장 실패했습니다.\n";
            return;
        }
        for (const auto& student : students) {
            file << student.name << " " << student.id << " " << student.mid << " " << student.final << "\n";
        }
        file.close();
        cout << "파일을 저장 완료했습니다.\n";
    }
    void add() {
        string name;
        int id;
        double mid, final;

        cout << "이름을 입력하세요: ";
        cin >> name;
        cout << "학번을 입력하세요: ";
        cin >> id;
        cout << "중간고사 성적을 입력하세요: ";
        cin >> mid;
        cout << "기말고사 성적을 입력하세요: ";
        cin >> final;
        students.push_back(Student(name, id, mid, final));
        cout << "학생 추가 완료했습니다!\n";
    }
    void deleteStudent() {
        int id;
        cout << "삭제할 학생의 학번 입력하세요: ";
        cin >> id;
        auto it = students.begin();
        for (; it != students.end(); ++it) {
            if (it->id == id) {
                students.erase(it);
                cout << "학생을 삭제 완료했습니다.\n";
                return;
            }
        }
        cout << "해당 학번의 학생이 없습니다.\n";
    }
    void display() const {
        if (students.empty()) {
            cout << "저장된 학생 정보가 없습니다.\n";
            return;
        }
        cout << "\n===== 학생 목록 =====\n";
        for (const auto& student : students) {
            cout << "이름: " << student.name << ", 학번: " << student.id
                << ", 중간고사 성적: " << student.mid
                << ", 기말고사 성적: " << student.final << "\n";
        }
    }
};
int main() {
    StudentManagement sm;
    sm.loadFromFile();

    int choice;
    while (true) {
        cout << "\n===== 안녕하세요! 학생 관리 시스템입니다. 원하시는 기능을 이용하세요. =====\n";
        cout << "1. 학생 추가하기\n";
        cout << "2. 학생 삭제하기\n";
        cout << "3. 학생 목록 보기\n";
        cout << "4. 학생 정보 저장하기\n";
        cout << "5. 종료\n";
        cout << "선택: ";
        cin >> choice;

        switch (choice) {
        case 1:
            sm.add();
            break;
        case 2:
            sm.deleteStudent();
            break;
        case 3:
            sm.display();
            break;
        case 4:
            sm.saveToFile();
            break;
        case 5:
            sm.saveToFile();
            cout << "프로그램 종료.\n";
            return 0;
        default:
            cout << "잘못된 입력입니다. 다시 선택하세요.\n";
        }
    }
}
-------------------------------------------------------------------------------------------------------
2주차에는 학생 정보 추가,저장,목록 보기,삭제,종료 기능 등이 포함된 UI를 구현하였습니다. 
이 과정에서 기본적인 학생 정보 관리 기능은 구현되었으나 몇 가지 오류가 발견되었습니다.
첫째로 중복 등록 문제가 발생하여 이름과 학번이 같더라도 중복 등록이 가능했고 
둘째로는 삭제 기능에서 동일한 학번으로 여러 번 등록된 경우 해당 학번의 모든 데이터가 한 번에 삭제되는 문제가 있었습니다.
다음 주에는 출석 점수 자동 계산 기능과 점수 기반의 등급 분류 기능을 추가하고, 발견된 오류들을 수정할 예정입니다
