3주차 개발 계획서
2025/03/25
목표 : 기능에 따른 요구 사항 정리 및 저번주 발견한 오류 수정
-------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

class Student {
public:
    string name;
    int id;
    int tardy;
    int absent;
    double mid;
    double final;

    Student(string n, int i, int t, int a, double m, double f)
        : name(n), id(i), tardy(t), absent(a), mid(m), final(f) {}

    double attendance() const {
        int total_absent = absent + (tardy / 3);
        double score = 10 - (total_absent + (tardy % 3) * 0.2);
        return max(0.0, score);
    }

    double Score() const {
        return mid * 0.4 + final * 0.5 + attendance();
    }

    string Grade(const vector<Student>& students) const {
        double score = Score();
        vector<double> scores;

        for (const auto& student : students) {
            scores.push_back(student.Score());
        }

        sort(scores.begin(), scores.end(), greater<double>());

        int rank = find(scores.begin(), scores.end(), score) - scores.begin();
        double percent = (double)(rank + 1) / scores.size();

        if (mid == 0 || final == 0 || absent + (tardy / 3) >= 3) return "F";
        if (percent <= 0.10) 
            return "A+";
        if (percent <= 0.30) 
            return "A";
        if (percent <= 0.40)
            return "B+";
        if (percent <= 0.60) 
            return "B";
        if (percent <= 0.70) 
            return "C+";
        return "C";
    }
};

class StudentManagement {
private:
    vector<Student> students;

public:
    void loadFromFile() {
        ifstream file("students.txt");
        if (!file) {
            cout << "저장된 파일이 없습니다.\n";
            return;
        }

        students.clear();
        string name;
        int id, tardy, absent;
        double mid, final;
        while (file >> name >> id >> tardy >> absent >> mid >> final) {
            students.push_back(Student(name, id, tardy, absent, mid, final));
        }

        file.close();
        cout << "파일을 로드 완료했습니다. ";
    }

    void saveToFile() {
        ofstream file("students.txt");
        if (!file) {
            cout << "파일을 저장하는 데 실패했습니다.\n";
            return;
        }

        for (const auto& student : students) {
            file << student.name << " " << student.id << " " << student.tardy << " "
                << student.absent << " " << student.mid << " " << student.final << "\n";
        }

        file.close();
        cout << "파일을 저장 완료했습니다.\n";
    }

    void add() {
        string name;
        int id, tardy, absent;
        double mid, final;

        cout << "이름을 입력하세요: ";
        cin >> name;
        cout << "학번을 입력하세요: ";
        cin >> id;

        for (const auto& student : students) {
            if (student.id == id) {
                cout << "이미 존재하는 학번입니다.\n";
                return;
            }
        }

        cout << "지각 횟수를 입력하세요: ";
        cin >> tardy;
        cout << "결석 횟수를 입력하세요: ";
        cin >> absent;
        cout << "중간고사 성적을 입력하세요: ";
        cin >> mid;
        cout << "기말고사 성적을 입력하세요: ";
        cin >> final;

        students.push_back(Student(name, id, tardy, absent, mid, final));
        cout << "학생 추가 완료했습니다!\n";

        saveToFile();
    }

    void deleteStudent() {
        int id;
        cout << "삭제할 학생의 학번 입력하세요: ";
        cin >> id;

        auto it = students.begin();
        for (; it != students.end(); ++it) {
            if (it->id == id) {
                students.erase(it);
                cout << "학생을 삭제 완료했습니다.\n";
                saveToFile();
                return;
            }
        }

        cout << "해당 학번의 학생이 없습니다.\n";
    }

    void clearAllStudents() {
        students.clear();
        cout << "모든 학생 정보가 초기화되었습니다.\n";
        saveToFile();
    }

    void display() const {
        if (students.empty()) {
            cout << "저장된 학생 정보가 없습니다.\n";
            return;
        }

        cout << "\n===== 학생 목록 =====\n";
        for (const auto& student : students) {
            cout << "이름: " << student.name << ", 학번: " << student.id
                << ", 중간고사 성적: " << student.mid
                << ", 기말고사 성적: " << student.final
                << ", 출석 점수: " << student.attendance()
                << ", 최종 성적: " << student.Score()
                << ", 학점: " << student.Grade(students) << "\n";
        }
    }
};

int main() {
    StudentManagement sm;
    sm.loadFromFile();

    int choice;
    while (true) {
        cout << "\n===== 안녕하세요! 학생 관리 시스템입니다. 원하시는 기능을 이용하세요. =====\n";
        cout << "1. 학생 추가하기\n";
        cout << "2. 학생 삭제하기\n";
        cout << "3. 학생 목록 보기\n";
        cout << "4. 종료\n";
        cout << "선택: ";
        cin >> choice;

        switch (choice) {
        case 1:
            sm.add();
            break;
        case 2:
            while (true) {
                cout << "\n===== 삭제 및 초기화 기능 =====\n";
                cout << "1. 학생 삭제하기\n";
                cout << "2. 학생 목록 초기화하기\n";
                cout << "3. 돌아가기\n";
                cout << "선택: ";
                cin >> choice;

                if (choice == 1) {
                    sm.deleteStudent();
                }
                else if (choice == 2) {
                    sm.clearAllStudents();
                }
                else if (choice == 3) {
                    break;
                }
                else {
                    cout << "잘못된 입력입니다. 다시 선택하세요.\n";
                }
            }
            break;
        case 3:
            sm.display();
            break;
        case 4:
            sm.saveToFile();
            cout << "프로그램 종료.\n";
            return 0;
        default:
            cout << "잘못된 입력입니다. 다시 선택하세요.\n";
        }
    }
}
-------------------------------------------------------------------------------------------------------
3주차에는 학생 삭제 시 초기화 기능과 편의성을 추가했으며 출석 점수 및 성적 등급 나누는 기능도 추가하고 지난 주 발견한 오류를 수정했습니다.
구현하지 못한 기능은 학번 10자리를 제대로 입력했는지 확인하는 기능입니다. 
발견한 오류로는 학생 추가 및 삭제 기능에서 루프가 반복되는 문제와 입력한 데이터가 이상한 형태로 저장되는 문제가 있었습니다.
다음 주에는 출석 점수와 성적 등급 나누는 기능에 추가할 내용 구현하고 발견된 오류들을 수정할 예정입니다.
